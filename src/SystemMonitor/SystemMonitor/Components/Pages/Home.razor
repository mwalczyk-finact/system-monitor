@page "/"
@using ApexCharts
@using SystemMonitor.Services
@using MudBlazor

@inject ISystemPerformanceService PerformanceService

<MudContainer Class="mb-4" Style="text-align: center; margin-top: 20px; overflow: visible;">
    <MudText Color="MudBlazor.Color.Primary" Typo="Typo.h3" Style="font-weight:bold; margin-bottom: 16px;">
        System Performance Monitor
    </MudText>

    <MudSelect T="int" Label="Update Frequency (seconds)" Value="@updateInterval" ValueChanged="OnUpdateIntervalChanged">
        <MudSelectItem Value="1">1 second</MudSelectItem>
        <MudSelectItem Value="5">5 seconds</MudSelectItem>
        <MudSelectItem Value="10">10 seconds</MudSelectItem>
    </MudSelect>

    <MudButton StartIcon="@Icons.Material.Filled.PlayCircle" OnClick="@StartMonitoring" Variant="Variant.Filled" Color="MudBlazor.Color.Success" Style="border-radius: 20px; min-width: 150px; margin: 10px;">
        Start
    </MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.PauseCircle" OnClick="@PauseMonitoring" Variant="Variant.Filled" Color="MudBlazor.Color.Warning" Style="border-radius: 20px; min-width: 150px; margin: 10px;">
        Pause
    </MudButton>
    <MudButton StartIcon="@Icons.Material.Filled.RestartAlt" OnClick="@ResetCharts" Variant="Variant.Filled" Color="MudBlazor.Color.Error" Style="border-radius: 20px; min-width: 150px; margin: 10px;">
        Reset
    </MudButton>

    <MudText Typo="Typo.subtitle1" Style="margin-top: 10px;">
        Average CPU Usage: @GetAverage(cpuData) %
    </MudText>
    <MudText Typo="Typo.subtitle1" Style="margin-top: 10px;">
        Average Memory Usage: @GetAverage(memoryData) %
    </MudText>
    <MudText Typo="Typo.subtitle1" Style="margin-top: 10px;">
        Average GPU Usage: @GetAverage(gpuData) %
    </MudText>

</MudContainer>

<MudGrid Class="mt-2" Gutter="true" Style="height: 100vh; padding: 0;">
    <!-- CPU Chart -->
    <MudItem xs="12" md="4">
        <MudCard Elevation="6" Style="height: 100%; padding: 16px; margin-bottom: 16px;">
            <MudCardContent>
                <ApexChart @ref="cpuChart" TItem="ChartDataPoint" Title="CPU Usage" Options="CpuChartOptions">
                    <ApexPointSeries TItem="ChartDataPoint"
                                     SeriesType="SeriesType.Area"
                                     Items="cpuData"
                                     YValue="y => (decimal)y.Value"
                                     XValue="x => x.Time" />
                </ApexChart>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Memory Chart -->
    <MudItem xs="12" md="4">
        <MudCard Elevation="6" Style="height: 100%; padding: 16px; margin-bottom: 16px;">
            <MudCardContent>
                <ApexChart @ref="memoryChart" TItem="ChartDataPoint" Title="Memory Usage" Options="MemoryChartOptions">
                    <ApexPointSeries TItem="ChartDataPoint"
                                     SeriesType="SeriesType.Area"
                                     Items="memoryData"
                                     YValue="y => (decimal)y.Value"
                                     XValue="x => x.Time" />
                </ApexChart>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- GPU Chart -->
    <MudItem xs="12" md="4">
        <MudCard Elevation="6" Style="height: 100%; padding: 16px; margin-bottom: 16px;">
            <MudCardContent>
                <ApexChart @ref="gpuChart" TItem="ChartDataPoint" Title="GPU Usage" Options="GpuChartOptions">
                    <ApexPointSeries TItem="ChartDataPoint"
                                     SeriesType="SeriesType.Area"
                                     Items="gpuData"
                                     YValue="y => (decimal)y.Value"
                                     XValue="x => x.Time" />
                </ApexChart>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    private List<ChartDataPoint> cpuData = new List<ChartDataPoint>();
    private List<ChartDataPoint> memoryData = new List<ChartDataPoint>();
    private List<ChartDataPoint> gpuData = new List<ChartDataPoint>();
    private ApexChart<ChartDataPoint>? cpuChart = new();
    private ApexChart<ChartDataPoint>? memoryChart = new();
    private ApexChart<ChartDataPoint>? gpuChart = new();
    private System.Timers.Timer? timer = new();
    private bool isMonitoring = true;
    private ApexChartOptions<ChartDataPoint> CpuChartOptions { get; set; } = new();
    private ApexChartOptions<ChartDataPoint> GpuChartOptions { get; set; } = new();
    private ApexChartOptions<ChartDataPoint> MemoryChartOptions { get; set; } = new();
    private int updateInterval = 1;

    protected override void OnInitialized()
    {
        // Set up the timer to update every second
        timer = new System.Timers.Timer(TimeSpan.FromSeconds(updateInterval));
        timer.Elapsed += async (sender, e) => await UpdatePerformanceData();
        timer.AutoReset = true;
        timer.Enabled = true;
        CpuChartOptions = CreateChartOptions();
        MemoryChartOptions = CreateChartOptions();
        GpuChartOptions = CreateChartOptions();
    }

    private void PauseMonitoring() => isMonitoring = false;
    private void StartMonitoring() => isMonitoring = true;
    private double GetAverage(List<ChartDataPoint> data) => data.Count > 0 ? data.Average(x => x.Value) : 0;

    private void OnUpdateIntervalChanged(int newInterval)
    {
        updateInterval = newInterval;

        // Restart the timer with the new interval
        if (timer != null)
        {
            timer.Stop();
            timer.Interval = updateInterval * 1000;
            timer.Start();
        }
    }

    private ApexChartOptions<ChartDataPoint> CreateChartOptions()
    {
        return new ApexChartOptions<ChartDataPoint>
            {
                Chart = new Chart
                {
                    Background = "#f4f4f4", // Light gray background
                    Toolbar = new Toolbar
                    {
                        Show = true
                    },
                    Animations = new Animations
                    {
                        Enabled = true, // Enable animations
                        Easing = Easing.Easeinout, // Smooth easing function for animations
                        Speed = 800, // Speed in milliseconds
                        AnimateGradually = new AnimateGradually
                        {
                            Enabled = true,
                            Delay = 150 // Delay between the animation of data points
                        },
                        DynamicAnimation = new DynamicAnimation
                        {
                            Enabled = true,
                            Speed = 350 // Animation speed for data points when the chart updates
                        }
                    }
                },
                Stroke = new Stroke
                {
                    Curve = Curve.Smooth, // Smoother line transitions
                    Width = 3
                },
                Fill = new Fill
                {
                    Type = FillType.Gradient, // Add a gradient fill to the chart area
                    Gradient = new FillGradient
                    {
                        Shade = GradientShade.Light,
                        Type = GradientType.Vertical,
                        ShadeIntensity = 0.5,
                        OpacityFrom = 0.7,
                        OpacityTo = 0.3,
                    }
                },
                Yaxis = new List<YAxis>
                {
                    new YAxis
                    {
                        Labels = new YAxisLabels
                        {
                            Formatter = "function(val) { return val + '%'; }",
                            Style = new AxisLabelStyle
                            {
                                FontSize = "12px",
                                Colors = "#333"
                            }
                        }

                    }
                },
                Xaxis = new XAxis
                {
                    Labels = new XAxisLabels
                    {
                        Formatter = "function(value) { return new Date(value).toLocaleTimeString('en-US', { hour: '2-digit', minute:'2-digit', second:'2-digit' }); }",
                        Show = false,
                        Style = new AxisLabelStyle
                        {
                            FontSize = "12px",
                            Colors = "#333"
                        }
                    }
                },
                Tooltip = new Tooltip
                {
                    Enabled = true,
                    X = new TooltipX
                    {
                        Formatter = "function(value) { return new Date(value).toLocaleTimeString(); }"
                    }
                },
                Grid = new Grid
                {
                    BorderColor = "#e0e0e0", // Lighter gridlines
                    Row = new GridRow
                    {
                        Colors = new List<string> { "#f0f0f0", "#ffffff" }, // Alternating background colors
                        Opacity = 0.5
                    }
                }
            };
    }

    private async Task UpdatePerformanceData()
    {

        if (!isMonitoring) return;

        // Get the current CPU and memory usage
        double cpuUsage = PerformanceService.GetCpuUsage();
        double memoryUsage = PerformanceService.GetMemoryUsage();
        double gpuUsage = PerformanceService.GetGpuUsage();

        // Add new data points to the lists
        cpuData.Add(new ChartDataPoint { Time = DateTime.Now, Value = cpuUsage });
        memoryData.Add(new ChartDataPoint { Time = DateTime.Now, Value = memoryUsage });
        gpuData.Add(new ChartDataPoint { Time = DateTime.Now, Value = gpuUsage });

        // Limit the history to the last 100 data points
        if (cpuData.Count > 100) cpuData.RemoveAt(0);
        if (memoryData.Count > 100) memoryData.RemoveAt(0);
        if (gpuData.Count > 100) gpuData.RemoveAt(0);

        // Update the charts with the new data without redrawing
        await cpuChart!.UpdateSeriesAsync(false);
        await memoryChart!.UpdateSeriesAsync(false);
        await gpuChart!.UpdateSeriesAsync(false);
    }

    private void ResetCharts()
    {
        cpuData.Clear();
        memoryData.Clear();
        gpuData.Clear();
        StateHasChanged();
    }

    public class ChartDataPoint
    {
        public DateTime Time { get; set; }
        public double Value { get; set; }
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }
}
